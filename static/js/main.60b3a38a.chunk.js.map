{"version":3,"sources":["constants/ApiConstants.ts","store/expenseClaim/actions.ts","store/expenseClaim/types.ts","validators/ExpenseClaimFormValidator.ts","components/CreateExpenseClaimForm/CreateExpenseClaimForm.tsx","store/expenseClaimForm/actions.ts","store/expenseClaimForm/types.ts","utils/CurrencyUtils.ts","components/ExpenseClaim/ExpenseClaim.tsx","components/ExpenseClaimsList/ExpenseClaimsList.tsx","views/ExpenseClaimsView.tsx","constants/RouteConstants.ts","views/HomeView/HomeView.tsx","views/Error404View.tsx","store/auth/reducers.ts","store/expenseClaimForm/reducers.ts","store/expenseClaim/reducers.ts","store/rootReducer.ts","store/auth/types.ts","store/store.ts","store/auth/actions.ts","components/FamexAppBar/FamexAppBar.tsx","views/AuthenticatedBaseView.tsx","views/LoginView.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["ApiConstants","BASE_URL","process","fetchExpenseClaims","dispatch","getState","a","axios","get","headers","Authorization","auth","accessToken","response","expenseClaims","data","map","item","id","amount","amount_in_cents","description","createdAt","created_at","claimant","displayName","display_name","storeExpenseClaims","type","ExpenseClaimFormValidator","formValues","values","errors","this","push","field","message","BaseCreateExpenseClaimForm","props","onInputChange","event","undefined","target","name","Error","includes","updateExpenseClaimForm","expenseClaimForm","value","onSubmit","preventDefault","formValidator","validate","setState","formErrors","state","length","submitExpenseClaim","hasError","filter","e","Paper","style","padding","display","FormControl","flexGrow","TextField","label","variant","inputProps","onChange","marginTop","InputLabel","htmlFor","OutlinedInput","startAdornment","InputAdornment","position","error","flexDirection","Button","color","onClick","React","CreateExpenseClaimForm","connect","expenseClaimFormModel","payload","currentUser","post","Math","round","CurrencyUtils","number","Intl","NumberFormat","currency","format","parts","formatToParts","result","part","replace","nameInitials","require","renderTimestamp","expenseClaim","moment","displayText","fromNow","threeDaysAgo","subtract","isBefore","fontSize","renderSecondary","renderDescriptionIfExists","ExpenseClaim","ListItem","ListItemAvatar","Avatar","ListItemText","primary","justifyContent","alignItems","toCurrencyWithoutTrailingZeroes","secondary","disableTypography","BaseExpenseClaimsList","endOfList","scrollToBottom","current","scrollIntoView","prevProps","prevState","snapshot","JSON","stringify","List","dense","ec","key","ref","ExpenseClaimsList","BaseExpenseClaimsView","className","height","overflow","mapDispatchToProps","ExpenseClaimsView","RouteConstants","HomeView","to","email","Error404View","Component","initialState","rootReducer","combineReducers","action","sorted","sort","b","utc","local","toDate","persistConfig","storage","localStorage","persistedReducer","persistReducer","middlewares","thunkMiddleware","storeEnhancer","applyMiddleware","attemptAuthentication","identifier","password","requestBody","jwt","user","storeToken","useStyles","makeStyles","theme","createStyles","grow","menuButton","marginRight","spacing","title","search","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","breakpoints","up","searchIcon","pointerEvents","inputRoot","inputInput","transition","transitions","create","sectionDesktop","sectionMobile","FamexAppBar","currentUserDisplayName","clearCurrentUser","clearAccessToken","classes","useState","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","Boolean","isMobileMenuOpen","handleProfileMenuOpen","currentTarget","handleMobileMenuClose","handleMenuClose","menuId","renderMenu","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","onClose","MenuItem","avatar","renderMobileMenu","IconButton","aria-label","aria-controls","aria-haspopup","AppBar","Toolbar","Typography","noWrap","edge","AuthenticatedBaseView","withStyles","toolbar","mixins","Container","maxWidth","component","BaseLoginView","username","onUsernameChange","onPasswordChange","hasLoggedIn","placeholder","LoginView","store","createStore","composeWithDevTools","persistor","persistStore","configureAndCreateStore","App","CssBaseline","exact","path","render","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gXAGaA,EAAe,CAC1BC,SAHY,UADmCC,mCACnC,UCMP,SAASC,IAEd,8CAAO,WAAOC,EAAoBC,GAA3B,iBAAAC,EAAA,sEACkBC,IAAMC,IAAN,UAClBR,EAAaC,SADK,mBAErB,CACEQ,QAAS,CACPC,cAAc,UAAD,OAAYL,IAAWM,KAAKC,gBAL1C,OACCC,EADD,OAUCC,EAAgCD,EAASE,KAAKC,KAAI,SAACC,GAAD,MAAiC,CACvFC,GAAID,EAAKC,GACTC,OAAQF,EAAKG,gBACbC,YAAaJ,EAAKI,YAClBC,UAAWL,EAAKM,WAChBC,SAAU,CACRN,GAAID,EAAKO,SAASN,GAClBO,YAAaR,EAAKO,SAASE,kBAI/BtB,EAASuB,EAAmBb,IArBvB,2CAAP,wDAyBF,SAASa,EACPb,GAEA,MAAO,CACLc,KCXgC,uBDYhCd,iB,uFEhCSe,EAAb,WAIE,WAAYC,GAAoC,yBAH/BC,YAG8B,OAFxCC,OAA4C,GAGjDC,KAAKF,OAASD,EALlB,4CAQE,WACOG,KAAKF,OAAOZ,QACfc,KAAKD,OAAOE,KAAK,CAAEC,MAAO,SAAUC,QAAS,cAE1CH,KAAKF,OAAOV,aACfY,KAAKD,OAAOE,KAAK,CAAEC,MAAO,cAAeC,QAAS,kBAbxD,KCcMC,E,kDAEJ,WAAYC,GAAqC,IAAD,8BAC9C,cAAMA,IAORC,cAAgB,SAACC,GACf,QAA0BC,IAAtBD,EAAME,OAAOC,KAAoB,MAAM,IAAIC,MAAM,2BAOrD,IAN2B,CACzB,WACA,SACA,WACA,eAEsBC,SAASL,EAAME,OAAOC,MAC5C,MAAM,IAAIC,MAAJ,kCAAqCJ,EAAME,OAAOC,OAE1D,EAAKL,MAAMQ,uBAAX,2BACK,EAAKR,MAAMS,kBADhB,kBAEGP,EAAME,OAAOC,KAAOH,EAAME,OAAOM,UArBU,EAyBhDC,SAAW,SAACT,GACVA,EAAMU,iBACN,IAAMC,EAAgB,IAAItB,EACxB,EAAKS,MAAMS,kBAEbI,EAAcC,WACd,EAAKC,SAAS,CACZC,WAAYH,EAAcnB,SACzB,WACoC,IAAjC,EAAKuB,MAAMD,WAAWE,QAAc,EAAKlB,MAAMmB,yBAlCP,EAsChDC,SAAW,SAACvB,GACV,OAAuE,IAAhE,EAAKoB,MAAMD,WAAWK,QAAO,SAAAC,GAAC,OAAIA,EAAEzB,QAAUA,KAAOqB,QApC5D,EAAKD,MAAQ,CACXD,WAAY,IAJgC,E,0CA0ChD,WACE,OACE,gBAACO,EAAA,EAAD,CAAOC,MAAO,CAAEC,QAAS,QACvB,wBAAMd,SAAUhB,KAAKgB,UACnB,uBAAKa,MAAO,CAAEE,QAAS,SAqBrB,gBAACC,EAAA,EAAD,CAAaH,MAAO,CAAEI,SAAU,IAC9B,gBAACC,EAAA,EAAD,CACEC,MAAM,cACNC,QAAQ,WACRC,WAAY,CAAE3B,KAAM,eACpBK,MAAOf,KAAKK,MAAMS,iBAAiB1B,aAAe,GAClDkD,SAAUtC,KAAKM,kBAKrB,uBAAKuB,MAAO,CAAEE,QAAS,OAAQQ,UAAW,QACxC,gBAACP,EAAA,EAAD,CAAaH,MAAO,CAAEI,SAAU,GAAKG,QAAS,YAC5C,gBAACI,EAAA,EAAD,CAAYC,QAAQ,6BAApB,UACA,gBAACC,EAAA,EAAD,CACEzD,GAAG,4BACHU,KAAM,SACNoB,WAA8CP,IAAvCR,KAAKK,MAAMS,iBAAiB5B,OAAuB,GAAKc,KAAKK,MAAMS,iBAAiB5B,OAC3FoD,SAAUtC,KAAKM,cACfqC,eAAgB,gBAACC,EAAA,EAAD,CAAgBC,SAAS,SAAzB,KAChBnC,KAAM,SACNoC,MAAO9C,KAAKyB,SAAS,cAK3B,uBACEI,MAAO,CACLE,QAAS,OACTgB,cAAe,cACfR,UAAW,QAGb,gBAACS,EAAA,EAAD,CACEZ,QAAQ,YACRa,MAAM,UACNjC,SAAUhB,KAAKgB,SACfkC,QAASlD,KAAKgB,UAJhB,iB,GAtG6BmC,aAiI5BC,EAAyBC,aAZd,SAAC/B,GAAD,MAAsB,CAC5CR,iBAAkBQ,EAAMR,qBAGC,SAAC3C,GAC1B,MAAO,CACL0C,uBAAwB,SAACyC,GAAD,OACtBnF,ECpIC,SACLmF,GAEA,MAAO,CACL3D,KChBqC,4BDiBrC4D,QAASD,GD+HEzC,CAAuByC,KAClC9B,mBAAoB,kBAAMrD,ECpH5B,uCAAO,WAAOA,EAAoBC,GAA3B,mBAAAC,EAAA,2DAC2BD,IAAW0C,iBAAnC5B,EADH,EACGA,OAAQE,EADX,EACWA,YAEXF,EAHA,sBAGc,IAAIyB,MAAM,oBAHxB,UAKAvC,IAAWM,KAAK8E,YALhB,iEASClF,IAAMmF,KAAN,UACD1F,EAAaC,SADZ,mBAEJ,CACEmB,gBAAiBuE,KAAKC,MAAe,IAATzE,GAC5BE,cACAG,SAAUnB,IAAWM,KAAK8E,YAAcvE,IAE1C,CACET,QAAS,CACPC,cAAc,UAAD,OAAYL,IAAWM,KAAKC,gBAlB1C,OAuBLR,EA9BK,CACLwB,KCtBoC,6BDoDpCxB,EAASD,KAxBJ,2CAAP,6DDwHoCmF,CAGpCjD,G,mCGzJWwD,EAAb,+FACE,SAAkBC,GAChB,OAAO,IAAIC,KAAKC,aAAa,QAAS,CACpClC,MAAO,WACPmC,SAAU,QACTC,OAAOJ,KALd,6CAQE,SAAuCA,GACrC,IAD0D,EACpDK,EAAQ,IAAIJ,KAAKC,aAAa,QAAS,CAC3ClC,MAAO,WACPmC,SAAU,QACTG,cAAcN,GAEbO,EAAS,GAN6C,cAQvCF,GARuC,IAQ1D,2BAA0B,CAAC,IAAhBG,EAAe,QACxB,GAAkB,aAAdA,EAAK1E,MACY,OAAf0E,EAAKtD,MAEP,OADAqD,EAASA,EAAOE,QAAQ,IAAK,IAIjCF,GAAUC,EAAKtD,OAfyC,8BAiB1D,OAAOqD,MAzBX,K,mCCSMG,EAAeC,EAAQ,IAmBvBC,EAAkB,SAACC,GACvB,IAAMrF,EAAYsF,IAAOD,EAAarF,WAClCuF,EAAcvF,EAAUwF,UAEtBC,EAAeH,MAASI,SAAS,EAAG,KAG1C,OAFI1F,EAAU2F,SAASF,KAAeF,EAAcvF,EAAU4E,OAAO,sBAE9D,uBAAKpC,MAAO,CAAEoD,SAAU,MAAOhC,MAAO,YAAc2B,IAGvDM,EAAkB,SAACR,GAAD,OACtB,2BAEGS,EAA0BT,KAIzBS,EAA4B,SAACT,GACjC,OAAKA,EAAatF,YAGhB,uBAAKyC,MAAO,CAAEoD,SAAU,MAAOhC,MAAO,YACnCyB,EAAatF,aAJoB,MAS3BgG,EAAe,SAAC/E,GAAD,OAC1B,gBAACgF,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,KACGhB,EAAalE,EAAMqE,aAAanF,SAASC,eAG9C,gBAACgG,EAAA,EAAD,CACEC,SAhDiBf,EAgDMrE,EAAMqE,aA/CjC,uBACE7C,MAAO,CACLE,QAAS,OACT2D,eAAgB,gBAChBC,WAAY,WAGd,2BAAM/B,EAAcgC,gCAAgClB,EAAaxF,OAAS,MACzEuF,EAAgBC,KAwCfmB,UAAWX,EAAgB7E,EAAMqE,cACjCoB,mBAAmB,KAlDH,IAACpB,GCHjBqB,E,kDAGJ,WAAY1F,GAAgC,IAAD,8BACzC,cAAMA,IAHS2F,eAE0B,IAM3CC,eAAiB,WACf,EAAKD,UAAUE,QAAUC,kBAJzB,EAAKH,UAAY7C,cAHwB,E,qDAU3C,WACEnD,KAAKiG,mB,gCAGP,SAAmBG,EAA6CC,EAAyBC,GACnFC,KAAKC,UAAUJ,EAAUvH,iBAAmB0H,KAAKC,UAAUxG,KAAKK,MAAMxB,gBACxEmB,KAAKiG,mB,oBAIT,WACE,OACE,gBAACQ,EAAA,EAAD,CAAMC,OAAO,EAAM7E,MAAK,eAAO7B,KAAKK,MAAMwB,QACvC7B,KAAKK,MAAMxB,cAAcE,KAAI,SAAA4H,GAAE,OAC9B,gBAAC,EAAD,CAAcjC,aAAciC,EAAIC,IAAKD,EAAG1H,QAE1C,sBAAI4H,IAAK7G,KAAKgG,iB,GA7Bc7C,aAuCvB2D,EAAoBzD,aAJT,SAAC/B,GAAD,MAAsB,CAC5CzC,cAAeyC,EAAMoD,aAAa7F,iBAGHwE,CAC/B0C,GCvCIgB,E,uKACJ,WACE/G,KAAKK,MAAMnC,uB,oBAGb,WACE,OACE,uBACE8I,UAAU,oBACVnF,MAAO,CAAEE,QAAS,OAAQgB,cAAe,SAAUkE,OAAQ,SAE3D,gBAACH,EAAD,CAAmBjF,MAAO,CAAEqF,SAAU,UACtC,gBAAC9D,EAAD,W,GAZ4BD,aAsB9BgE,EAAqB,CAAEjJ,sBAGhBkJ,EAAoB/D,aAPT,SAAC/B,GAAD,MAAsB,CAC5CzC,cAAeyC,EAAMoD,aAAa7F,iBAQlCsI,EAF+B9D,CAG/B0D,G,QCrCWM,EAJA,IAIAA,GAHC,SAGDA,GAFU,kBCkCVC,GAAWjE,aAJA,SAAC/B,GAAD,MAAsB,CAC5CkC,YAAalC,EAAM5C,KAAK8E,eAGFH,EAzBsB,SAAAhD,GAC5C,OACE,2BACE,yFAEuBG,IAAtBH,EAAMmD,aACL,4CACkB,gBAAC,IAAD,CAAM+D,GAAIF,IAAV,QADlB,gBAKDhH,EAAMmD,aACL,qCACYnD,EAAMmD,YAAYgE,MAD9B,UAC4C,IAC1C,gBAAC,IAAD,CAAMD,GAAIF,IAAV,QAFF,+BCXKI,GAAb,4JASE,WACE,OAAO,+CAVX,GAAkCC,a,2BCH5BC,GAA0B,CAC9BnE,iBAAahD,EACb7B,iBAAa6B,GCJTmH,GAAsC,CAC1CzI,OAAQ,EACRE,YAAa,ICNTuI,GAAkC,CACtC9I,cAAe,ICCJ+I,GAAcC,2BAAgB,CACzCnJ,KHQyB,WAGV,IAFf4C,EAEc,uDAFNqG,GACRG,EACc,uCACd,MIZgC,uBJY5BA,EAAOnI,KACF,2BACF2B,GADL,IAEE3C,YAAamJ,EAAOnJ,cIhBQ,uBJoB5BmJ,EAAOnI,KACF,2BACF2B,GADL,IAEEkC,YAAasE,EAAOtE,cIrBQ,uBJyB5BsE,EAAOnI,KACF,2BACF2B,GADL,IAEEkC,iBAAahD,II3Be,uBJ+B5BsH,EAAOnI,KACF,2BACF2B,GADL,IAEE3C,iBAAa6B,IAIVc,GGvCPoD,aDAiC,WAGV,IAFvBpD,EAEsB,uDAFdqG,GACRG,EACsB,uCACtB,GdgBkC,yBchB9BA,EAAOnI,KAA+B,CACxC,IAAMoI,EAASD,EAAOjJ,cAAcmJ,MAAK,SAAC3J,EAAG4J,GAC3C,OAAI5J,EAAEgB,UAAY4I,EAAE5I,WAAmB,EACnChB,EAAEgB,UAAY4I,EAAE5I,UAAkB,EAElChB,EAAEY,GAAKgJ,EAAEhJ,IAAY,EACrBZ,EAAEY,GAAKgJ,EAAEhJ,GAAW,EAEjB,KAGT,MAAO,CACLJ,cAAekJ,EAAOhJ,KAAI,SAAA4H,GACxB,OAAO,2BACFA,GADL,IAEEtH,UAAWsF,IAAOuD,IAAIvB,EAAGtH,WAAW8I,QAAQC,eAMpD,OAAO9G,GCxBPR,iBFIqC,WAGV,IAF3BQ,EAE0B,uDAFlBqG,GACRG,EAC0B,uCAC1B,MTfuC,8BSenCA,EAAOnI,KACF,CACLT,OAAQ4I,EAAOvE,QAAQrE,OACvBE,YAAa0I,EAAOvE,QAAQnE,aTjBM,6BSqBlC0I,EAAOnI,KACF,2BACF2B,GADL,IAEEpC,YAAQsB,EACRpB,YAAa,KAIVkC,K,kBIxBH+G,GAAgB,CACpBzB,IAAK,OACL0B,Q,QAASC,GAGLC,GAAmBC,aAAeJ,GAAeT,IAEjDc,GAAc,CAACC,MAEfC,GAAgBC,mBAAe,WAAf,EAAmBH,ICO5BI,GAAwB,SACnCC,EACAC,GAEA,8CAAO,WAAO7K,GAAP,uBAAAE,EAAA,6DACC4K,EAAc,CAClBF,aACAC,YAHG,SAMkB1K,IAAMmF,KAAN,UAClB1F,EAAaC,SADK,eAErBiL,GARG,OAMCrK,EAND,SAWqCA,EAASE,KAA3CoK,EAXH,EAWGA,IAAKC,EAXR,EAWQA,KACbhL,EAtB4E,CAC9EwB,KFbgC,qBEchC6D,YAoB4B,CACxBvE,GAAIkK,EAAKlK,GACTuI,MAAO2B,EAAK3B,MACZhI,YAAa2J,EAAK1J,gBAEpBtB,EAASiL,GAAWF,IAjBf,2CAAP,uDAqBIE,GAAa,SAACzK,GAAD,MAAkD,CACnEgB,KF3CgC,qBE4ChChB,gB,sICpCI4F,GAAeC,EAAQ,IAEvB6E,GAAYC,cAAW,SAACC,GAAD,OAC3BC,aAAa,CACXC,KAAM,CACJxH,SAAU,GAEZyH,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACL5H,SAAU,GAEZ6H,OAAO,aACLjH,SAAU,WACVkH,aAAcR,EAAMS,MAAMD,aAC1BE,gBAAiBC,aAAKX,EAAMY,QAAQC,OAAOC,MAAO,KAClD,UAAW,CACTJ,gBAAiBC,aAAKX,EAAMY,QAAQC,OAAOC,MAAO,MAEpDV,YAAaJ,EAAMK,QAAQ,GAC3BU,WAAY,EACZC,MAAO,QACNhB,EAAMiB,YAAYC,GAAG,MAAQ,CAC5BH,WAAYf,EAAMK,QAAQ,GAC1BW,MAAO,SAGXG,WAAY,CACVH,MAAOhB,EAAMK,QAAQ,GACrB3C,OAAQ,OACRpE,SAAU,WACV8H,cAAe,OACf5I,QAAS,OACT4D,WAAY,SACZD,eAAgB,UAElBkF,UAAW,CACT3H,MAAO,WAET4H,WAAW,aACT/I,QAASyH,EAAMK,QAAQ,EAAG,EAAG,EAAG,GAChCkB,WAAYvB,EAAMwB,YAAYC,OAAO,SACrCT,MAAO,QACNhB,EAAMiB,YAAYC,GAAG,MAAQ,CAC5BF,MAAO,MAGXU,eAAe,aACblJ,QAAS,QACRwH,EAAMiB,YAAYC,GAAG,MAAQ,CAC5B1I,QAAS,SAGbmJ,cAAc,aACZnJ,QAAS,QACRwH,EAAMiB,YAAYC,GAAG,MAAQ,CAC5B1I,QAAS,cAyIJoJ,GAAc9H,aAXH,SAAC/B,GAAD,MAAsB,CAC5C8J,uBAAwB9J,EAAM5C,KAAK8E,YAAchE,gBAGxB,SAACrB,GAC1B,MAAO,CACLkN,iBAAkB,kBAAMlN,EDtJmC,CAC7DwB,KF/CgC,wBGqM9B2L,iBAAkB,kBAAMnN,EDnJmC,CAC7DwB,KFlDgC,2BGwMP0D,EA7HH,SAAChD,GACvB,IAAMkL,EAAUlC,KADmC,EAEnBlG,IAAMqI,SAA6B,MAFhB,oBAE5CC,EAF4C,KAElCC,EAFkC,OAM/CvI,IAAMqI,SAA6B,MANY,oBAIjDG,EAJiD,KAKjDC,EALiD,KAQ7CC,EAAaC,QAAQL,GACrBM,EAAmBD,QAAQH,GAEjC,SAASK,EAAsBzL,GAC7BmL,EAAYnL,EAAM0L,eAGpB,SAASC,IACPN,EAAsB,MAGxB,SAASO,IACPT,EAAY,MACZQ,IAaF,IAAME,EAAS,8BACTC,EACJ,kBAACC,GAAA,EAAD,CACEb,SAAUA,EACVc,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CxN,GAAImN,EACJM,aAAW,EACXC,gBAAiB,CAAEH,SAAU,MAAOC,WAAY,SAChDG,KAAMf,EACNgB,QAASV,GAET,kBAACW,GAAA,EAAD,CAAU5J,QAjBd,WACE7C,EAAMgL,mBACNhL,EAAMiL,mBACNa,MAcE,YAIEY,EAAS,kBAACxH,EAAA,EAAD,KAAShB,GAAalE,EAAM+K,yBAErC4B,EACJ,kBAACV,GAAA,EAAD,CACEb,SAAUE,EACVY,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CxN,GALiB,qCAMjByN,aAAW,EACXC,gBAAiB,CAAEH,SAAU,MAAOC,WAAY,SAChDG,KAAMb,EACNc,QAASX,GAET,kBAACY,GAAA,EAAD,CAAU5J,QAAS8I,GACjB,kBAACiB,GAAA,EAAD,CACEC,aAAW,0BACXC,gBAAc,8BACdC,gBAAc,OACdnK,MAAM,WAEL8J,GAEH,wCAKN,OACE,yBAAK/F,UAAWuE,EAAQ9B,MACtB,kBAAC4D,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAYvG,UAAWuE,EAAQ1B,MAAOzH,QAAQ,KAAKoL,QAAM,GAAzD,SAGA,yBAAKxG,UAAWuE,EAAQ9B,OACxB,yBAAKzC,UAAWuE,EAAQN,gBACtB,kBAACgC,GAAA,EAAD,CACEQ,KAAK,MACLP,aAAW,0BACXC,gBAAef,EACfgB,gBAAc,OACdlK,QAAS8I,EACT/I,MAAM,WAEL8J,IAGL,yBAAK/F,UAAWuE,EAAQL,eACtB,kBAAC+B,GAAA,EAAD,CACEC,aAAW,YACXC,gBAhDS,qCAiDTC,gBAAc,OACdlK,QA5EZ,SAA8B3C,GAC5BqL,EAAsBrL,EAAM0L,gBA4ElBhJ,MAAM,WAEN,kBAAC,KAAD,UAKP+J,EACAX,MC9JDlF,GAAqB,CAAE2B,0BAMhB4E,GAAwBC,cAJtB,SAACpE,GAAD,MAAiB,CAC9BqE,QAASrE,EAAMsE,OAAOD,WAGaD,CACnCtK,aAXsB,SAAC/B,GAAD,MAAsB,CAC5CkC,YAAalC,EAAM5C,KAAK8E,eAYtB2D,GAFF9D,EAzBgC,SAAChD,GACjC,QAA0BG,IAAtBH,EAAMmD,YAA2B,OAAO,gBAAC,IAAD,CAAU+D,GAAG,WADc,IAG/DgE,EAAYlL,EAAZkL,QAER,OACE,gBAACuC,GAAA,EAAD,CAAWC,SAAS,MAClB,gBAAC5C,GAAD,MACA,uBAAKlM,GAAG,iDAAiD+H,UAAWuE,EAAQqC,UAC5E,uBAAK3O,GAAG,uCAAuCoB,EAAM2N,gBCLrDC,G,4MACJ3M,MAAQ,CACN4M,SAAU,GACVlF,SAAU,I,EAGZmF,iBAAmB,SAAC5N,GAA0C,IAC7C2N,EAAa3N,EAAME,OAA1BM,MACR,EAAKK,SAAS,CACZ8M,c,EAIJE,iBAAmB,SAAC7N,GAA0C,IAC7CyI,EAAazI,EAAME,OAA1BM,MACR,EAAKK,SAAS,CACZ4H,c,EAIJhI,SAAW,SAACT,GACVA,EAAMU,iBACN,EAAKZ,MAAMyI,sBAAsB,EAAKxH,MAAM4M,SAAU,EAAK5M,MAAM0H,W,EAGnEqF,YAAc,WACZ,YAC6B7N,IAA3B,EAAKH,MAAMmD,kBACgBhD,IAA3B,EAAKH,MAAM1B,a,4CAIf,WACE,OAAIqB,KAAKqO,cAAsB,gBAAC,IAAD,CAAU9G,GAAIF,KAG3C,wBACErG,SAAUhB,KAAKgB,SACfa,MAAO,CACLE,QAAS,OACTgB,cAAe,SACfwH,MAAO,UAGT,yBACExJ,MAAOf,KAAKsB,MAAM4M,SAClB5L,SAAUtC,KAAKmO,iBACfG,YAAY,UAEd,yBACE3O,KAAK,WACLoB,MAAOf,KAAKsB,MAAM0H,SAClB1G,SAAUtC,KAAKoO,iBACfE,YAAY,aAEd,yBAAO3O,KAAK,SAASoB,MAAM,iB,GAvDP2G,aAkEtBP,GAAqB,CAAE2B,0BAEhByF,GAAYlL,aAPD,SAAC/B,GAAD,MAA2B,CACjDkC,YAAalC,EAAM5C,KAAK8E,YACxB7E,YAAa2C,EAAM5C,KAAKC,eAOxBwI,GAFuB9D,CAGvB4K,I,UC7EMO,GLI+B,WACrC,IAAMA,EAAQC,uBAAYjG,GAAkBkG,+BAAoB9F,KAEhE,MAAO,CAAE4F,QAAOG,UADEC,aAAaJ,IKNfK,GAAVL,MAEKM,GAAgB,kBAC3B,kBAAC,IAAD,KACE,kBAACC,GAAA,EAAD,MACA,kBAAC,IAAD,CAAUP,MAAOA,IACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAM5H,EAAqB6H,OAAQ,kBAAM,kBAAC5H,GAAD,SACtD,kBAAC,IAAD,CAAO0H,OAAK,EAACC,KAAM5H,GAAsB2G,UAAWO,KACpD,kBAAC,IAAD,CACES,OAAK,EACLC,KAAM5H,GACN6H,OAAQ,kBACN,kBAACxB,GAAD,CAAuBM,UAAW,kBAAC5G,EAAD,WAGtC,kBAAC,IAAD,CAAO6H,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,GAAD,aClBlBpD,QACW,cAA7BqD,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEdF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASL,OAAO,kBAAC,GAAD,MAASM,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.60b3a38a.chunk.js","sourcesContent":["const host = process.env.REACT_APP_STRAPI_HOST ? process.env.REACT_APP_STRAPI_HOST : 'http://localhost';\nconst BASE_URL = `${host}:1337`;\n\nexport const ApiConstants = {\n  BASE_URL\n};\n","import { ExpenseClaim, ExpenseClaimResponse, STORE_EXPENSE_CLAIMS, StoreExpenseClaimsAction } from \"./types\";\nimport axios from \"axios\";\nimport { ApiConstants } from \"../../constants/ApiConstants\";\nimport { Dispatch } from \"redux\";\nimport { AppState } from \"../rootReducer\";\n\n// thunk\nexport function fetchExpenseClaims(): any {\n  // todo: figure out how to properly type returns of thunk actions\n  return async (dispatch: Dispatch, getState: () => AppState) => {\n    const response = await axios.get(\n      `${ApiConstants.BASE_URL}/expense-claims`,\n      {\n        headers: {\n          Authorization: `Bearer ${getState().auth.accessToken}`\n        }\n      }\n    );\n\n    const expenseClaims: ExpenseClaim[] = response.data.map((item: ExpenseClaimResponse) => ({\n      id: item.id,\n      amount: item.amount_in_cents,\n      description: item.description,\n      createdAt: item.created_at,\n      claimant: {\n        id: item.claimant.id,\n        displayName: item.claimant.display_name\n      }\n    }));\n\n    dispatch(storeExpenseClaims(expenseClaims));\n  };\n}\n\nfunction storeExpenseClaims(\n  expenseClaims: ExpenseClaim[]\n): StoreExpenseClaimsAction {\n  return {\n    type: STORE_EXPENSE_CLAIMS,\n    expenseClaims\n  };\n}\n\n// // todo: externalize the adding of auth headers for DRY's sake\n// export function updateExpenseClaim(expenseClaim: ExpenseClaim): any {\n//   return async (dispatch: Dispatch, getState: () => AppState) => {\n//     const response = await axios.put(\n//       `${ApiConstants.BASE_URL}/expense-claims/${expenseClaim.id}`,\n//       {\n//         name: expenseClaim.name,\n//         amount: expenseClaim.amount\n//       },\n//       {\n//         headers: {\n//           Authorization: `Bearer ${getState().auth.accessToken}`\n//         }\n//       }\n//     );\n//\n//     console.log(response);\n//\n//     dispatch(fetchExpenseClaims());\n//   };\n// }\n","import { User, UserResponse } from \"../user/types\";\n\nexport interface ExpenseClaimResponse {\n  id: number;\n  description: string;\n  amount_in_cents: number;\n  created_at: Date;\n  claimant: UserResponse;\n}\n\nexport interface ExpenseClaim {\n  id: number;\n  amount: number;\n  // category: Category;\n  description: string;\n  claimant: User;\n  settledAt: Date;\n  createdAt: Date;\n}\n\nexport interface Category {\n  id: number;\n  name: string;\n}\n\n// types of actions you want to support, for this domain\nexport const FETCH_EXPENSE_CLAIMS = \"FETCH_EXPENSE_CLAIMS\";\nexport const STORE_EXPENSE_CLAIMS = \"STORE_EXPENSE_CLAIMS\";\nexport const UPDATE_EXPENSE_CLAIM = \"UPDATE_EXPENSE_CLAIM\"; // for when the user wants to correct typos\nexport const SET_EXPENSE_CLAIM_AS_SETTLED = \"SET_EXPENSE_CLAIM_AS_SETTLED\"; // for when the user wants to mark a bunch of ECs as settled\n\n// all the interfaces describing the shapes of actions you want to support, for this domain\nexport interface FetchExpenseClaimsAction {\n  type: typeof FETCH_EXPENSE_CLAIMS;\n}\n\nexport interface StoreExpenseClaimsAction {\n  type: typeof STORE_EXPENSE_CLAIMS;\n  expenseClaims: ExpenseClaim[];\n}\n\nexport interface UpdateExpenseClaimAction {\n  type: typeof UPDATE_EXPENSE_CLAIM;\n  payload: {\n    expenseClaim: ExpenseClaim;\n  };\n}\n\nexport type ExpenseClaimActionTypes =\n  | FetchExpenseClaimsAction\n  | StoreExpenseClaimsAction\n  | UpdateExpenseClaimAction;\n\n// the slice of state that you want, for this domain\nexport interface ExpenseClaimState {\n  expenseClaims: ExpenseClaim[];\n}\n","import { ExpenseClaimFormModel } from \"../store/expenseClaimForm/types\";\n\nexport interface ExpenseClaimFormValidationError {\n  field: string;\n  message: string;\n}\n\nexport class ExpenseClaimFormValidator {\n  private readonly values: ExpenseClaimFormModel;\n  public errors: ExpenseClaimFormValidationError[] = [];\n\n  constructor(formValues: ExpenseClaimFormModel) {\n    this.values = formValues;\n  }\n\n  validate() {\n    if (!this.values.amount)\n      this.errors.push({ field: \"amount\", message: \"Mandatory\" });\n\n    if (!this.values.description)\n      this.errors.push({ field: \"description\", message: \"Mandatory\" });\n  }\n}\n","import * as React from \"react\";\nimport { ChangeEvent, Dispatch, FormEvent } from \"react\";\nimport { connect } from \"react-redux\";\nimport { submitExpenseClaim, updateExpenseClaimForm } from \"../../store/expenseClaimForm/actions\";\nimport { ExpenseClaimFormModel } from \"../../store/expenseClaimForm/types\";\nimport { AppState } from \"../../store/rootReducer\";\nimport { Button, FormControl, InputAdornment, InputLabel, OutlinedInput, Paper, TextField } from \"@material-ui/core\";\nimport { ExpenseClaimFormValidationError, ExpenseClaimFormValidator } from \"../../validators/ExpenseClaimFormValidator\";\n\ninterface CreateExpenseClaimFormProps {\n  expenseClaimForm: ExpenseClaimFormModel;\n  updateExpenseClaimForm: (\n    expenseClaimFormModel: ExpenseClaimFormModel\n  ) => void;\n  submitExpenseClaim: () => void;\n}\n\ninterface CreateExpenseClaimFormState {\n  formErrors: ExpenseClaimFormValidationError[];\n}\n\nclass BaseCreateExpenseClaimForm extends React.Component<CreateExpenseClaimFormProps,\n  CreateExpenseClaimFormState> {\n  constructor(props: CreateExpenseClaimFormProps) {\n    super(props);\n\n    this.state = {\n      formErrors: []\n    };\n  }\n\n  onInputChange = (event: ChangeEvent<{ name?: string; value: unknown }>) => {\n    if (event.target.name === undefined) throw new Error(\"Unknown form input name\");\n    const acceptedInputNames = [\n      \"currency\",\n      \"amount\",\n      \"category\",\n      \"description\"\n    ];\n    if (!acceptedInputNames.includes(event.target.name))\n      throw new Error(`Unknown form input name ${event.target.name}`);\n\n    this.props.updateExpenseClaimForm({\n      ...this.props.expenseClaimForm,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  onSubmit = (event: FormEvent<HTMLButtonElement | HTMLFormElement>) => {\n    event.preventDefault();\n    const formValidator = new ExpenseClaimFormValidator(\n      this.props.expenseClaimForm\n    );\n    formValidator.validate();\n    this.setState({\n      formErrors: formValidator.errors\n    }, () => {\n      if (this.state.formErrors.length === 0) this.props.submitExpenseClaim();\n    });\n  };\n\n  hasError = (field: string) => {\n    return this.state.formErrors.filter(e => e.field === field).length !== 0;\n  };\n\n  render() {\n    return (\n      <Paper style={{ padding: \"8px\" }}>\n        <form onSubmit={this.onSubmit}>\n          <div style={{ display: \"flex\" }}>\n            {/*<FormControl*/}\n            {/*  error={this.hasError(\"category\")}*/}\n            {/*  variant=\"outlined\"*/}\n            {/*  style={{ flexGrow: 1 }}*/}\n            {/*>*/}\n            {/*  <InputLabel htmlFor=\"category\">Category</InputLabel>*/}\n            {/*  <Select*/}\n            {/*    inputProps={{ name: \"category\" }}*/}\n            {/*    value={this.props.expenseClaimForm.category || \"\"}*/}\n            {/*    onChange={this.onInputChange}*/}\n            {/*  >*/}\n            {/*    <MenuItem value=\"\">*/}\n            {/*      <em>None</em>*/}\n            {/*    </MenuItem>*/}\n            {/*    <MenuItem value={1}>Cab</MenuItem>*/}\n            {/*    <MenuItem value={2}>Groceries</MenuItem>*/}\n            {/*    <MenuItem value={3}>Diapers</MenuItem>*/}\n            {/*  </Select>*/}\n            {/*</FormControl>*/}\n\n            <FormControl style={{ flexGrow: 1 }}>\n              <TextField\n                label=\"Description\"\n                variant=\"outlined\"\n                inputProps={{ name: \"description\" }}\n                value={this.props.expenseClaimForm.description || \"\"}\n                onChange={this.onInputChange}\n              />\n            </FormControl>\n          </div>\n\n          <div style={{ display: \"flex\", marginTop: \"8px\" }}>\n            <FormControl style={{ flexGrow: 1 }} variant={\"outlined\"}>\n              <InputLabel htmlFor=\"outlined-adornment-amount\">Amount</InputLabel>\n              <OutlinedInput\n                id=\"outlined-adornment-amount\"\n                type={\"number\"}\n                value={this.props.expenseClaimForm.amount === undefined ? '' : this.props.expenseClaimForm.amount}\n                onChange={this.onInputChange}\n                startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n                name={\"amount\"}\n                error={this.hasError(\"amount\")}\n              />\n            </FormControl>\n          </div>\n\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row-reverse\",\n              marginTop: \"8px\"\n            }}\n          >\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onSubmit={this.onSubmit}\n              onClick={this.onSubmit}\n            >\n              Create\n            </Button>\n          </div>\n        </form>\n      </Paper>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  expenseClaimForm: state.expenseClaimForm\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\n  return {\n    updateExpenseClaimForm: (expenseClaimFormModel: ExpenseClaimFormModel) =>\n      dispatch(updateExpenseClaimForm(expenseClaimFormModel)),\n    submitExpenseClaim: () => dispatch(submitExpenseClaim())\n  };\n};\n\nexport const CreateExpenseClaimForm = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BaseCreateExpenseClaimForm);\n","import {\n  CLEAR_EXPENSE_CLAIM_FORM,\n  ClearExpenseClaimForm,\n  ExpenseClaimFormModel,\n  UPDATE_EXPENSE_CLAIM_FORM,\n  UpdateExpenseClaimForm\n} from \"./types\";\nimport { Dispatch } from \"redux\";\nimport { AppState } from \"../rootReducer\";\nimport axios from \"axios\";\nimport { ApiConstants } from \"../../constants/ApiConstants\";\nimport { fetchExpenseClaims } from \"../expenseClaim/actions\";\n\nexport function updateExpenseClaimForm(\n  expenseClaimFormModel: ExpenseClaimFormModel\n): UpdateExpenseClaimForm {\n  return {\n    type: UPDATE_EXPENSE_CLAIM_FORM,\n    payload: expenseClaimFormModel\n  };\n}\n\nexport function clearExpenseClaimForm(): ClearExpenseClaimForm {\n  return {\n    type: CLEAR_EXPENSE_CLAIM_FORM\n  };\n}\n\n// thunk\nexport function submitExpenseClaim(): any {\n  return async (dispatch: Dispatch, getState: () => AppState) => {\n    const { amount, description } = getState().expenseClaimForm;\n\n    if (!amount) throw new Error(\"Amount is falsy.\");\n\n    if (!getState().auth.currentUser) {\n      return;\n    }\n\n    await axios.post(\n      `${ApiConstants.BASE_URL}/expense-claims`,\n      {\n        amount_in_cents: Math.round(amount * 100),\n        description,\n        claimant: getState().auth.currentUser!!.id\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${getState().auth.accessToken}`\n        }\n      }\n    );\n\n    dispatch(clearExpenseClaimForm());\n    dispatch(fetchExpenseClaims());\n  };\n}\n","// types of actions you want to support, for this domain\nexport const UPDATE_EXPENSE_CLAIM_FORM = \"UPDATE_EXPENSE_CLAIM_FORM\";\nexport const CLEAR_EXPENSE_CLAIM_FORM = \"CLEAR_EXPENSE_CLAIM_FORM\";\n\nexport interface ExpenseClaimFormModel {\n  amount?: number;\n  description?: string;\n}\n\n// all the interfaces describing the shapes of actions you want to support, for this domain\nexport interface UpdateExpenseClaimForm {\n  type: typeof UPDATE_EXPENSE_CLAIM_FORM;\n  payload: ExpenseClaimFormModel;\n}\n\nexport interface ClearExpenseClaimForm {\n  type: typeof CLEAR_EXPENSE_CLAIM_FORM;\n}\n\nexport type ExpenseClaimFormActionTypes = UpdateExpenseClaimForm | ClearExpenseClaimForm;\n\n// the slice of state that you want, for this domain\nexport interface ExpenseClaimFormState {\n  currency?: string;\n  amount?: number;\n  category?: string;\n  description?: string;\n}\n","export class CurrencyUtils {\n  static toCurrency(number: number): string {\n    return new Intl.NumberFormat(\"en-sg\", {\n      style: \"currency\",\n      currency: \"sgd\"\n    }).format(number);\n  }\n\n  static toCurrencyWithoutTrailingZeroes(number: number): any {\n    const parts = new Intl.NumberFormat(\"en-sg\", {\n      style: \"currency\",\n      currency: \"sgd\"\n    }).formatToParts(number);\n\n    let result = \"\";\n\n    for (const part of parts) {\n      if (part.type === \"fraction\") {\n        if (part.value === \"00\") {\n          result = result.replace(\".\", \"\");\n          return result;\n        }\n      }\n      result += part.value;\n    }\n    return result;\n  }\n}\n","import * as React from \"react\";\nimport { ExpenseClaim as ExpenseClaimModel } from \"../../store/expenseClaim/types\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport { CurrencyUtils } from \"../../utils/CurrencyUtils\";\nimport moment from \"moment\";\nimport { ListItemAvatar } from \"@material-ui/core\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nconst nameInitials = require('name-initials');\n\ninterface ExpenseClaimProps {\n  expenseClaim: ExpenseClaimModel;\n}\n\nconst renderPrimary = (expenseClaim: ExpenseClaimModel) => (\n  <div\n    style={{\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\"\n    }}\n  >\n    <div>{CurrencyUtils.toCurrencyWithoutTrailingZeroes(expenseClaim.amount / 100)}</div>\n    {renderTimestamp(expenseClaim)}\n  </div>\n);\n\nconst renderTimestamp = (expenseClaim: ExpenseClaimModel) => {\n  const createdAt = moment(expenseClaim.createdAt);\n  let displayText = createdAt.fromNow();\n\n  const threeDaysAgo = moment().subtract(3, \"d\");\n  if (createdAt.isBefore(threeDaysAgo)) displayText = createdAt.format(\"D MMM YYYY, HH:mm\");\n\n  return <div style={{ fontSize: \"70%\", color: \"#aaaaaa\" }}>{displayText}</div>;\n};\n\nconst renderSecondary = (expenseClaim: ExpenseClaimModel) => (\n  <div>\n    {/*<div style={{ fontSize: \"100%\", color: \"#aaaaaa\" }}>{expenseClaim.category.name}</div>*/}\n    {renderDescriptionIfExists(expenseClaim)}\n  </div>\n);\n\nconst renderDescriptionIfExists = (expenseClaim: ExpenseClaimModel) => {\n  if (!expenseClaim.description) return null;\n\n  return (\n    <div style={{ fontSize: \"80%\", color: \"#aaaaaa\" }}>\n      {expenseClaim.description}\n    </div>\n  );\n};\n\nexport const ExpenseClaim = (props: ExpenseClaimProps) => (\n  <ListItem>\n    <ListItemAvatar>\n      <Avatar>\n        {nameInitials(props.expenseClaim.claimant.displayName)}\n      </Avatar>\n    </ListItemAvatar>\n    <ListItemText\n      primary={renderPrimary(props.expenseClaim)}\n      secondary={renderSecondary(props.expenseClaim)}\n      disableTypography={true}\n    />\n  </ListItem>\n);\n","import * as React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport { AppState } from \"../../store/rootReducer\";\nimport { ExpenseClaim as ExpenseClaimModel } from \"../../store/expenseClaim/types\";\nimport { connect } from \"react-redux\";\nimport { ExpenseClaim } from \"../ExpenseClaim/ExpenseClaim\";\n\ninterface ExpenseClaimsListProps {\n  expenseClaims: ExpenseClaimModel[];\n  style?: object;\n}\n\nclass BaseExpenseClaimsList extends React.Component<ExpenseClaimsListProps> {\n  private readonly endOfList: React.RefObject<HTMLLIElement>;\n\n  constructor(props: ExpenseClaimsListProps) {\n    super(props);\n\n    this.endOfList = React.createRef();\n  }\n\n  scrollToBottom = () => {\n    this.endOfList.current!!.scrollIntoView();\n  };\n\n  componentDidMount(): void {\n    this.scrollToBottom();\n  }\n\n  componentDidUpdate(prevProps: Readonly<ExpenseClaimsListProps>, prevState: Readonly<{}>, snapshot?: any): void {\n    if (JSON.stringify(prevProps.expenseClaims) !== JSON.stringify(this.props.expenseClaims)) {\n      this.scrollToBottom();\n    }\n  }\n\n  render() {\n    return (\n      <List dense={true} style={{ ...this.props.style }}>\n        {this.props.expenseClaims.map(ec => (\n          <ExpenseClaim expenseClaim={ec} key={ec.id} />\n        ))}\n        <li ref={this.endOfList} />\n      </List>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  expenseClaims: state.expenseClaim.expenseClaims\n});\n\nexport const ExpenseClaimsList = connect(mapStateToProps)(\n  BaseExpenseClaimsList\n);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { ExpenseClaim as ExpenseClaimModel } from \"../store/expenseClaim/types\";\nimport { AppState } from \"../store/rootReducer\";\nimport { fetchExpenseClaims } from \"../store/expenseClaim/actions\";\nimport { CreateExpenseClaimForm } from \"../components/CreateExpenseClaimForm/CreateExpenseClaimForm\";\nimport { ExpenseClaimsList } from \"../components/ExpenseClaimsList/ExpenseClaimsList\";\n\ninterface ExpenseClaimsViewProps {\n  expenseClaims: ExpenseClaimModel[];\n  fetchExpenseClaims: () => void;\n}\n\nclass BaseExpenseClaimsView extends React.Component<ExpenseClaimsViewProps> {\n  componentDidMount(): void {\n    this.props.fetchExpenseClaims();\n  }\n\n  render() {\n    return (\n      <div\n        className=\"ExpenseClaimsView\"\n        style={{ display: \"flex\", flexDirection: \"column\", height: \"90vh\" }}\n      >\n        <ExpenseClaimsList style={{ overflow: \"auto\" }} />\n        <CreateExpenseClaimForm />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  expenseClaims: state.expenseClaim.expenseClaims\n});\n\nconst mapDispatchToProps = { fetchExpenseClaims };\n\n// todo: prop the connect<>() call\nexport const ExpenseClaimsView = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BaseExpenseClaimsView);\n","const HOME = \"/\";\nconst LOGIN = \"/login\";\nconst EXPENSE_CLAIMS = \"/expense-claims\";\n\nexport const RouteConstants = {\n  HOME,\n  LOGIN,\n  EXPENSE_CLAIMS\n};\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { User } from \"../../store/user/types\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../store/rootReducer\";\nimport { RouteConstants } from \"../../constants/RouteConstants\";\n\ninterface HomeViewProps {\n  currentUser?: User;\n}\n\nconst BaseHomeView: React.FC<HomeViewProps> = props => {\n  return (\n    <div>\n      <p>Welcome to Famex - the family expenditure tracking app!</p>\n\n      {props.currentUser === undefined && (\n        <p>\n          To begin, click <Link to={RouteConstants.LOGIN}>here</Link> to sign in.\n        </p>\n      )}\n\n      {props.currentUser && (\n        <p>\n          Welcome, {props.currentUser.email}! Click{\" \"}\n          <Link to={RouteConstants.EXPENSE_CLAIMS}>here</Link> to see expense claims.\n        </p>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  currentUser: state.auth.currentUser\n});\n\nexport const HomeView = connect(mapStateToProps)(BaseHomeView);\n","import * as React from \"react\";\nimport { Component } from \"react\";\n\ninterface Error404ViewProps {\n  // prop1: number;\n  // prop2: string;\n}\n\ninterface Error404ViewState {\n  // stateItem1: boolean;\n}\n\nexport class Error404View extends Component<Error404ViewProps,\n  Error404ViewState> {\n  // constructor(props: Error404ViewProps) {\n  //   super(props);\n  //   this.state = {\n  //     stateItem1: false\n  //   };\n  // }\n\n  render() {\n    return <div>Error404View</div>;\n  }\n}\n","import {\n  AuthActionTypes,\n  AuthState,\n  CLEAR_ACCESS_TOKEN,\n  CLEAR_CURRENT_USER,\n  STORE_ACCESS_TOKEN,\n  STORE_CURRENT_USER\n} from \"./types\";\n\nconst initialState: AuthState = {\n  currentUser: undefined,\n  accessToken: undefined\n};\n\nexport const authReducer = (\n  state = initialState,\n  action: AuthActionTypes\n): AuthState => {\n  if (action.type === STORE_ACCESS_TOKEN) {\n    return {\n      ...state,\n      accessToken: action.accessToken\n    };\n  }\n\n  if (action.type === STORE_CURRENT_USER) {\n    return {\n      ...state,\n      currentUser: action.currentUser\n    };\n  }\n\n  if (action.type === CLEAR_CURRENT_USER) {\n    return {\n      ...state,\n      currentUser: undefined\n    };\n  }\n\n  if (action.type === CLEAR_ACCESS_TOKEN) {\n    return {\n      ...state,\n      accessToken: undefined\n    };\n  }\n\n  return state;\n};\n","import {\n  CLEAR_EXPENSE_CLAIM_FORM,\n  ExpenseClaimFormActionTypes,\n  ExpenseClaimFormState,\n  UPDATE_EXPENSE_CLAIM_FORM\n} from \"./types\";\n\nconst initialState: ExpenseClaimFormState = {\n  amount: 0,\n  description: ''\n};\n\nexport const expenseClaimFormReducer = (\n  state = initialState,\n  action: ExpenseClaimFormActionTypes\n): ExpenseClaimFormState => {\n  if (action.type === UPDATE_EXPENSE_CLAIM_FORM) {\n    return {\n      amount: action.payload.amount,\n      description: action.payload.description\n    };\n  }\n\n  if (action.type === CLEAR_EXPENSE_CLAIM_FORM) {\n    return {\n      ...state,\n      amount: undefined,\n      description: ''\n    };\n  }\n\n  return state;\n};\n","import { ExpenseClaimActionTypes, ExpenseClaimState, STORE_EXPENSE_CLAIMS } from \"./types\";\nimport moment from \"moment\";\n\nconst initialState: ExpenseClaimState = {\n  expenseClaims: []\n};\n\nexport const expenseClaimReducer = (\n  state = initialState,\n  action: ExpenseClaimActionTypes\n): ExpenseClaimState => {\n  if (action.type === STORE_EXPENSE_CLAIMS) {\n    const sorted = action.expenseClaims.sort((a, b) => {\n      if (a.createdAt < b.createdAt) return -1;\n      if (a.createdAt > b.createdAt) return 1;\n\n      if (a.id < b.id) return -1;\n      if (a.id > b.id) return 1;\n\n      return 0;\n    });\n\n    return {\n      expenseClaims: sorted.map(ec => {\n        return {\n          ...ec,\n          createdAt: moment.utc(ec.createdAt).local().toDate()\n        };\n      })\n    };\n  }\n\n  return state;\n};\n","import { combineReducers } from \"redux\";\nimport { authReducer } from \"./auth/reducers\";\nimport { expenseClaimFormReducer } from \"./expenseClaimForm/reducers\";\nimport { expenseClaimReducer } from \"./expenseClaim/reducers\";\n\nexport const rootReducer = combineReducers({\n  auth: authReducer,\n  expenseClaim: expenseClaimReducer,\n  expenseClaimForm: expenseClaimFormReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n","import { User, UserResponse } from \"../user/types\";\nimport { Action } from \"redux\";\n\n// types of actions you want to support, for this domain\nexport const ATTEMPT_AUTHENTICATION = \"ATTEMPT_AUTHENTICATION\";\nexport const STORE_CURRENT_USER = \"STORE_CURRENT_USER\";\nexport const STORE_ACCESS_TOKEN = \"STORE_ACCESS_TOKEN\";\nexport const CLEAR_CURRENT_USER = \"CLEAR_CURRENT_USER\";\nexport const CLEAR_ACCESS_TOKEN = \"CLEAR_ACCESS_TOKEN\";\n\n// all the interfaces describing the shapes of actions you want to support, for this domain\nexport interface AttemptAuthenticationAction extends Action<string> {\n  type: typeof ATTEMPT_AUTHENTICATION;\n}\n\nexport interface StoreCurrentUserAction extends Action<string> {\n  type: typeof STORE_CURRENT_USER;\n  currentUser: User;\n}\n\nexport interface StoreAccessTokenAction extends Action<string> {\n  type: typeof STORE_ACCESS_TOKEN;\n  accessToken: string;\n}\n\nexport interface ClearCurrentUserAction extends Action<string> {\n  type: typeof CLEAR_CURRENT_USER;\n}\n\nexport interface ClearAccessTokenAction extends Action<string> {\n  type: typeof CLEAR_ACCESS_TOKEN;\n}\n\nexport type AuthActionTypes =\n  | AttemptAuthenticationAction\n  | StoreCurrentUserAction\n  | StoreAccessTokenAction\n  | ClearCurrentUserAction\n  | ClearAccessTokenAction;\n\n// the slice of state that you want, for this domain\nexport interface AuthState {\n  currentUser?: User;\n  accessToken?: string;\n}\n\nexport interface ILoginResponseBody {\n  jwt: string;\n  user: UserResponse;\n}\n","import { applyMiddleware, createStore } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { rootReducer } from \"./rootReducer\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport localStorage from \"redux-persist/lib/storage\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage: localStorage\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst middlewares = [thunkMiddleware];\n\nconst storeEnhancer = applyMiddleware(...middlewares);\n\nexport const configureAndCreateStore = () => {\n  const store = createStore(persistedReducer, composeWithDevTools(storeEnhancer));\n  const persistor = persistStore(store);\n  return { store, persistor };\n};\n","import axios from \"axios\";\nimport { ApiConstants } from \"../../constants/ApiConstants\";\nimport { User } from \"../user/types\";\nimport {\n  CLEAR_ACCESS_TOKEN,\n  CLEAR_CURRENT_USER, ClearAccessTokenAction,\n  ClearCurrentUserAction,\n  ILoginResponseBody,\n  STORE_ACCESS_TOKEN,\n  STORE_CURRENT_USER,\n  StoreAccessTokenAction,\n  StoreCurrentUserAction\n} from \"./types\";\nimport { AnyAction } from \"redux\";\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { AppState } from \"../rootReducer\";\n\nexport const storeCurrentUser = (currentUser: User): StoreCurrentUserAction => ({\n  type: STORE_CURRENT_USER,\n  currentUser\n});\n\n// thunk\nexport const attemptAuthentication = (\n  identifier: string,\n  password: string\n): ThunkAction<void, any, any, AnyAction> => {\n  return async (dispatch: ThunkDispatch<AppState, any, AnyAction>) => {\n    const requestBody = {\n      identifier,\n      password\n    };\n\n    const response = await axios.post(\n      `${ApiConstants.BASE_URL}/auth/local`,\n      requestBody\n    );\n\n    const { jwt, user }: ILoginResponseBody = response.data;\n    dispatch(storeCurrentUser({\n      id: user.id,\n      email: user.email,\n      displayName: user.display_name\n    }));\n    dispatch(storeToken(jwt));\n  };\n};\n\nconst storeToken = (accessToken: string): StoreAccessTokenAction => ({\n  type: STORE_ACCESS_TOKEN,\n  accessToken\n});\n\nexport const clearCurrentUser = (): ClearCurrentUserAction => ({\n  type: CLEAR_CURRENT_USER\n});\n\nexport const clearAccessToken = (): ClearAccessTokenAction => ({\n  type: CLEAR_ACCESS_TOKEN\n});\n","import React, { Dispatch } from \"react\";\nimport { createStyles, fade, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MoreIcon from \"@material-ui/icons/MoreVert\";\nimport { connect } from \"react-redux\";\nimport { clearAccessToken, clearCurrentUser } from \"../../store/auth/actions\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { AppState } from \"../../store/rootReducer\";\n\nconst nameInitials = require('name-initials');\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    grow: {\n      flexGrow: 1\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    title: {\n      flexGrow: 1\n    },\n    search: {\n      position: \"relative\",\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      \"&:hover\": {\n        backgroundColor: fade(theme.palette.common.white, 0.25)\n      },\n      marginRight: theme.spacing(2),\n      marginLeft: 0,\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        marginLeft: theme.spacing(3),\n        width: \"auto\"\n      }\n    },\n    searchIcon: {\n      width: theme.spacing(7),\n      height: \"100%\",\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    inputRoot: {\n      color: \"inherit\"\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 7),\n      transition: theme.transitions.create(\"width\"),\n      width: \"100%\",\n      [theme.breakpoints.up(\"md\")]: {\n        width: 200\n      }\n    },\n    sectionDesktop: {\n      display: \"none\",\n      [theme.breakpoints.up(\"md\")]: {\n        display: \"flex\"\n      }\n    },\n    sectionMobile: {\n      display: \"flex\",\n      [theme.breakpoints.up(\"md\")]: {\n        display: \"none\"\n      }\n    }\n  })\n);\n\ninterface FamexAppBarProps {\n  clearCurrentUser: () => void;\n  clearAccessToken: () => void;\n  currentUserDisplayName: string;\n}\n\nconst BaseFamexAppBar = (props: FamexAppBarProps) => {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [\n    mobileMoreAnchorEl,\n    setMobileMoreAnchorEl\n  ] = React.useState<null | HTMLElement>(null);\n\n  const isMenuOpen = Boolean(anchorEl);\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n  function handleProfileMenuOpen(event: React.MouseEvent<HTMLElement>) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleMobileMenuClose() {\n    setMobileMoreAnchorEl(null);\n  }\n\n  function handleMenuClose() {\n    setAnchorEl(null);\n    handleMobileMenuClose();\n  }\n\n  function handleMobileMenuOpen(event: React.MouseEvent<HTMLElement>) {\n    setMobileMoreAnchorEl(event.currentTarget);\n  }\n\n  function handleLogOutClick() {\n    props.clearCurrentUser();\n    props.clearAccessToken();\n    handleMenuClose();\n  }\n\n  const menuId = \"primary-search-account-menu\";\n  const renderMenu = (\n    <Menu\n      anchorEl={anchorEl}\n      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      open={isMenuOpen}\n      onClose={handleMenuClose}\n    >\n      <MenuItem onClick={handleLogOutClick}>Log out</MenuItem>\n    </Menu>\n  );\n\n  const avatar = <Avatar>{nameInitials(props.currentUserDisplayName)}</Avatar>;\n  const mobileMenuId = \"primary-search-account-menu-mobile\";\n  const renderMobileMenu = (\n    <Menu\n      anchorEl={mobileMoreAnchorEl}\n      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      id={mobileMenuId}\n      keepMounted\n      transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      open={isMobileMenuOpen}\n      onClose={handleMobileMenuClose}\n    >\n      <MenuItem onClick={handleProfileMenuOpen}>\n        <IconButton\n          aria-label=\"account of current user\"\n          aria-controls=\"primary-search-account-menu\"\n          aria-haspopup=\"true\"\n          color=\"inherit\"\n        >\n          {avatar}\n        </IconButton>\n        <p>Profile</p>\n      </MenuItem>\n    </Menu>\n  );\n\n  return (\n    <div className={classes.grow}>\n      <AppBar>\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Famex\n          </Typography>\n          <div className={classes.grow} />\n          <div className={classes.sectionDesktop}>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"account of current user\"\n              aria-controls={menuId}\n              aria-haspopup=\"true\"\n              onClick={handleProfileMenuOpen}\n              color=\"inherit\"\n            >\n              {avatar}\n            </IconButton>\n          </div>\n          <div className={classes.sectionMobile}>\n            <IconButton\n              aria-label=\"show more\"\n              aria-controls={mobileMenuId}\n              aria-haspopup=\"true\"\n              onClick={handleMobileMenuOpen}\n              color=\"inherit\"\n            >\n              <MoreIcon />\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n      {renderMobileMenu}\n      {renderMenu}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  currentUserDisplayName: state.auth.currentUser!!.displayName\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\n  return {\n    clearCurrentUser: () => dispatch(clearCurrentUser()),\n    clearAccessToken: () => dispatch(clearAccessToken())\n  };\n};\n\nexport const FamexAppBar = connect(mapStateToProps, mapDispatchToProps)(BaseFamexAppBar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { attemptAuthentication } from \"../store/auth/actions\";\nimport { AppState } from \"../store/rootReducer\";\nimport { User } from \"../store/user/types\";\nimport { Redirect } from \"react-router\";\nimport { Container, withStyles } from \"@material-ui/core\";\nimport { FamexAppBar } from \"../components/FamexAppBar/FamexAppBar\";\n\ninterface BaseAuthenticatedViewProps {\n  component: React.ReactElement;\n  currentUser?: User;\n  attemptAuthentication: (username: string, password: string) => void; // todo: extract to its own interface\n  classes: any;\n}\n\nconst BaseAuthenticatedBaseView = (props: BaseAuthenticatedViewProps) => {\n  if (props.currentUser === undefined) return <Redirect to=\"/login\" />;\n\n  const { classes } = props;\n\n  return (\n    <Container maxWidth=\"xs\">\n      <FamexAppBar />\n      <div id=\"AuthenticatedBaseView__app-bar-vertical-spacer\" className={classes.toolbar} />\n      <div id=\"AuthenticatedBaseView__main-content\">{props.component}</div>\n    </Container>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  currentUser: state.auth.currentUser\n});\n\nconst mapDispatchToProps = { attemptAuthentication };\n\nconst styles = (theme: any) => ({\n  toolbar: theme.mixins.toolbar\n});\n\nexport const AuthenticatedBaseView = withStyles(styles)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(BaseAuthenticatedBaseView)\n);\n","import * as React from \"react\";\nimport { ChangeEvent, Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { attemptAuthentication } from \"../store/auth/actions\";\nimport { AppState } from \"../store/rootReducer\";\nimport { User } from \"../store/user/types\";\nimport { Redirect } from \"react-router\";\nimport { RouteConstants } from \"../constants/RouteConstants\";\n\ninterface LoginViewProps {\n  currentUser: User;\n  accessToken: string;\n  attemptAuthentication: (username: string, password: string) => void;\n}\n\ninterface LoginViewState {\n  username: string;\n  password: string;\n}\n\nclass BaseLoginView extends Component<LoginViewProps, LoginViewState> {\n  state = {\n    username: \"\",\n    password: \"\"\n  };\n\n  onUsernameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value: username } = event.target;\n    this.setState({\n      username\n    });\n  };\n\n  onPasswordChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value: password } = event.target;\n    this.setState({\n      password\n    });\n  };\n\n  onSubmit = (event: ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    this.props.attemptAuthentication(this.state.username, this.state.password);\n  };\n\n  hasLoggedIn = () => {\n    return (\n      this.props.currentUser !== undefined &&\n      this.props.accessToken !== undefined\n    );\n  };\n\n  render() {\n    if (this.hasLoggedIn()) return <Redirect to={RouteConstants.EXPENSE_CLAIMS} />;\n\n    return (\n      <form\n        onSubmit={this.onSubmit}\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          width: \"400px\"\n        }}\n      >\n        <input\n          value={this.state.username}\n          onChange={this.onUsernameChange}\n          placeholder=\"Email\"\n        />\n        <input\n          type=\"password\"\n          value={this.state.password}\n          onChange={this.onPasswordChange}\n          placeholder=\"Password\"\n        />\n        <input type=\"submit\" value=\"Sign in\" />\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState): any => ({\n  currentUser: state.auth.currentUser,\n  accessToken: state.auth.accessToken\n});\n\nconst mapDispatchToProps = { attemptAuthentication };\n\nexport const LoginView = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BaseLoginView);\n","import React from \"react\";\nimport \"./App.css\";\nimport { Route, Switch } from \"react-router\";\nimport { ExpenseClaimsView } from \"../../views/ExpenseClaimsView\";\nimport { HomeView } from \"../../views/HomeView/HomeView\";\nimport { Error404View } from \"../../views/Error404View\";\nimport { Provider } from \"react-redux\";\nimport { configureAndCreateStore } from \"../../store/store\";\nimport { AuthenticatedBaseView } from \"../../views/AuthenticatedBaseView\";\nimport { LoginView } from \"../../views/LoginView\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport { RouteConstants } from \"../../constants/RouteConstants\";\nimport { HashRouter } from \"react-router-dom\";\n\nconst { store } = configureAndCreateStore();\n\nexport const App: React.FC = () => (\n  <HashRouter>\n    <CssBaseline />\n    <Provider store={store}>\n      <Switch>\n        <Route exact path={RouteConstants.HOME} render={() => <HomeView />} />\n        <Route exact path={RouteConstants.LOGIN} component={LoginView} />\n        <Route\n          exact\n          path={RouteConstants.EXPENSE_CLAIMS}\n          render={() => (\n            <AuthenticatedBaseView component={<ExpenseClaimsView />} />\n          )}\n        />\n        <Route path=\"*\" render={() => <Error404View />} />\n      </Switch>\n    </Provider>\n  </HashRouter>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n  window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}